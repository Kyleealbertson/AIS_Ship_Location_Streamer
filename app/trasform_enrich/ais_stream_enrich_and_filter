# services/transform_enrich/mapper.py
from typing import Optional, Dict, Any
from models import Canonical

# Optional: tiny enrichment example
def enrich_area(lat: float, lon: float) -> Optional[str]:
    # Detroit River-ish bbox (tune as you like)
    if 42.27 <= lat <= 42.37 and -83.18 <= lon <= -82.95:
        return "Detroit River"
    return None

def _safe_float(v, default=0.0) -> float:
    try:
        return float(v)
    except Exception:
        return float(default)

def _safe_int(v, default=0) -> int:
    try:
        return int(v)
    except Exception:
        return int(default)

async def ais_stream_enrich_and_filter(message: Dict[str, Any]) -> Optional[Canonical]:
    """
    Map a raw AIS message (from aisstream.io) into a Canonical record.
    Returns None if the message should be dropped (unsupported type, bad coords, etc.).
    """
    # Basic shape check
    mtype = message.get("MessageType")
    if mtype != "PositionReport":
        return None  # ignore other types for now (StaticData, etc.)

    payload = message.get("Message", {}).get("PositionReport", {})
    if not payload:
        return None

    # Extract / normalize core fields
    mmsi = _safe_int(payload.get("UserID"))
    lat = _safe_float(payload.get("Latitude"))
    lon = _safe_float(payload.get("Longitude"))
    sog = _safe_float(payload.get("SOG"))
    cog = _safe_float(payload.get("COG"))
    heading = payload.get("Heading")
    ts = _safe_int(payload.get("Timestamp"))

    # Basic validity filters (We could also move these messages to a deadletter queue)
    if mmsi <= 0:
        return None
    if not (-90.0 <= lat <= 90.0 and -180.0 <= lon <= 180.0):
        return None
    if ts <= 0:
        return None

    #small enrichment
    area = enrich_area(lat, lon)

    canon: Canonical = {
        "mmsi": mmsi,
        "ts": ts,
        "lat": lat,
        "lon": lon,
        "sog": sog,
        "cog": cog,
        "heading": _safe_float(heading) if heading is not None else None,
        "vessel_name": vessel_name,
        "ship_type": ship_type,
        "area": area,
    }
    return canon
